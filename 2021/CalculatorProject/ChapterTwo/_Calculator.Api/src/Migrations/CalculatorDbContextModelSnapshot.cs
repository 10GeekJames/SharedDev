// <auto-generated />
using System;
using Calculator.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Calculator.Api.Migrations
{
    [DbContext(typeof(CalculatorDbContext))]
    partial class CalculatorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Calculator.Models.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileKey")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Calculator.Models.Calculator2Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Bio")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("ExperienceRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("IntensityRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("SkillRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WhatISeek")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WhyMe")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WhyYou")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Calculator2Characters");
                });

            modelBuilder.Entity("Calculator.Models.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInviteOnly")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsListedInDirectory")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Calculator.Models.ChatEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntryData")
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("IndividualId");

                    b.ToTable("ChatEntries");
                });

            modelBuilder.Entity("Calculator.Models.ChatIndividual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("IndividualId");

                    b.ToTable("ChatIndividuals");
                });

            modelBuilder.Entity("Calculator.Models.Individual", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("WebId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("tzAbbr")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("tzName")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("tzOffset")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Calculator.Models.IndividualInBusiness", b =>
                {
                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("RoleLookupTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("IndividualId", "BusinessId");

                    b.HasIndex("BusinessId");

                    b.HasIndex("RoleLookupTypeId");

                    b.ToTable("IndividualInBusinesses");
                });

            modelBuilder.Entity("Calculator.Models.LookupCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayText")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("LookupText")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<long?>("ParentLookupCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SortOrderValue")
                        .HasMaxLength(200)
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("LookupCategories");
                });

            modelBuilder.Entity("Calculator.Models.LookupType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayText")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<long>("LookupCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("LookupText")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<long?>("OwnerIndividualId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentLookupTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SortOrderValue")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeBlob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TypeBool")
                        .HasColumnType("bit");

                    b.Property<string>("TypeJson")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("TypeNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeSpecialA")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeSpecialB")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Value")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("LookupCategoryId");

                    b.HasIndex("OwnerIndividualId");

                    b.ToTable("LookupTypes");
                });

            modelBuilder.Entity("Calculator.Models.PageInteraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Interaction")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("InteractionDescription")
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<long>("PageLoadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.HasKey("Id");

                    b.HasIndex("PageLoadId");

                    b.ToTable("PageInteractions");
                });

            modelBuilder.Entity("Calculator.Models.PageLoad", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<long>("LoadTimeInMS")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TargetRoute")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("WebsiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("IndividualId");

                    b.HasIndex("WebsiteId");

                    b.ToTable("PageLoads");
                });

            modelBuilder.Entity("Calculator.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<string>("LiveInteractQaSystemKeyId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LiveInteractStreamViewKeyId")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("ProductEventId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoomKey")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SecretSalty")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Calculator.Models.UserInRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CurrentSessionSince")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDisconnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReconnecting")
                        .HasColumnType("bit");

                    b.Property<string>("RoomName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UserName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("UserInRooms");
                });

            modelBuilder.Entity("Calculator.Models.WebContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Slug")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<float>("SortOrder")
                        .HasColumnType("real");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("WebPageId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebPageId");

                    b.ToTable("WebContents");
                });

            modelBuilder.Entity("Calculator.Models.WebContentDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WebContentDocuments");
                });

            modelBuilder.Entity("Calculator.Models.WebContentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CommaTags")
                        .HasMaxLength(240)
                        .HasColumnType("nvarchar(240)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FullContentJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullSubTitle")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("FullTitle")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("GoogleTrackingEventActionCode")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("InternalUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("MiniContent")
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("MiniSubTitle")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MiniTitle")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Slug")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<float>("SortOrder")
                        .HasColumnType("real");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StreamUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("WebContentId")
                        .HasColumnType("bigint");

                    b.Property<long>("WebContentItemLookupTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebContentId");

                    b.HasIndex("WebContentItemLookupTypeId");

                    b.ToTable("WebContentItems");
                });

            modelBuilder.Entity("Calculator.Models.WebContentUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltText")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Href")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Target")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("WebContentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebContentId");

                    b.ToTable("WebContentUrls");
                });

            modelBuilder.Entity("Calculator.Models.WebContentVideo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("PublishOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<long>("WebContentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebContentId");

                    b.ToTable("WebContentVideos");
                });

            modelBuilder.Entity("Calculator.Models.WebForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("WebSafeKey")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("WebForms");
                });

            modelBuilder.Entity("Calculator.Models.WebFormVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataTemplateJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValuesTemplateJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("VersionTag")
                        .HasColumnType("float");

                    b.Property<long>("WebFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebSafeKey")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("WebFormId");

                    b.ToTable("WebFormVersions");
                });

            modelBuilder.Entity("Calculator.Models.WebPage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MenuText")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Slug")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Title")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UrlToMatch")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<long>("WebSiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebSiteId");

                    b.ToTable("WebPages");
                });

            modelBuilder.Entity("Calculator.Models.Website", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("DefaultSubweb")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("DefaultUrl")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("GoogleAnalyticsTrackingCode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("IndividualId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoadingScreenImageUrl")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<long?>("MailgunIntegrationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<long?>("PrimaryIndividualId")
                        .HasColumnType("bigint");

                    b.Property<string>("WebsiteBannerUrl")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("WebsiteDescription")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("WebsiteKeywords")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("WebsiteLogoUrl")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("WebsiteTitle")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("IndividualId");

                    b.ToTable("Websites");
                });

            modelBuilder.Entity("Calculator.Models.WebsiteAlias", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Subweb")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Url")
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<long>("WebsiteId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WebsiteId");

                    b.ToTable("WebsiteAliases");
                });

            modelBuilder.Entity("Calculator.Models.Business", b =>
                {
                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("Businesses")
                        .HasForeignKey("IndividualId");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.Calculator2Character", b =>
                {
                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("Calculator2Characters")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.Chat", b =>
                {
                    b.HasOne("Calculator.Models.Individual", null)
                        .WithMany("Chats")
                        .HasForeignKey("IndividualId");
                });

            modelBuilder.Entity("Calculator.Models.ChatEntry", b =>
                {
                    b.HasOne("Calculator.Models.Chat", "Chat")
                        .WithMany("ChatEntries")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("ChatEntries")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.ChatIndividual", b =>
                {
                    b.HasOne("Calculator.Models.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("ChatIndividuals")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.IndividualInBusiness", b =>
                {
                    b.HasOne("Calculator.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("IndividualsInBusinesses")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.LookupType", "RoleLookupType")
                        .WithMany()
                        .HasForeignKey("RoleLookupTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Individual");

                    b.Navigation("RoleLookupType");
                });

            modelBuilder.Entity("Calculator.Models.LookupCategory", b =>
                {
                    b.HasOne("Calculator.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Calculator.Models.LookupType", b =>
                {
                    b.HasOne("Calculator.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.LookupCategory", "LookupCategory")
                        .WithMany("LookupTypes")
                        .HasForeignKey("LookupCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "OwnerIndividual")
                        .WithMany()
                        .HasForeignKey("OwnerIndividualId");

                    b.Navigation("Business");

                    b.Navigation("LookupCategory");

                    b.Navigation("OwnerIndividual");
                });

            modelBuilder.Entity("Calculator.Models.PageInteraction", b =>
                {
                    b.HasOne("Calculator.Models.PageLoad", "PageLoad")
                        .WithMany("PageInteractions")
                        .HasForeignKey("PageLoadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PageLoad");
                });

            modelBuilder.Entity("Calculator.Models.PageLoad", b =>
                {
                    b.HasOne("Calculator.Models.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Website", "Website")
                        .WithMany()
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Business");

                    b.Navigation("Individual");

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Calculator.Models.Room", b =>
                {
                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany("Rooms")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.WebContent", b =>
                {
                    b.HasOne("Calculator.Models.WebPage", "WebPage")
                        .WithMany("WebContents")
                        .HasForeignKey("WebPageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebPage");
                });

            modelBuilder.Entity("Calculator.Models.WebContentItem", b =>
                {
                    b.HasOne("Calculator.Models.WebContent", "WebContent")
                        .WithMany("WebContentItems")
                        .HasForeignKey("WebContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.LookupType", "WebContentItemLookupType")
                        .WithMany()
                        .HasForeignKey("WebContentItemLookupTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebContent");

                    b.Navigation("WebContentItemLookupType");
                });

            modelBuilder.Entity("Calculator.Models.WebContentUrl", b =>
                {
                    b.HasOne("Calculator.Models.WebContent", "WebContent")
                        .WithMany()
                        .HasForeignKey("WebContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebContent");
                });

            modelBuilder.Entity("Calculator.Models.WebContentVideo", b =>
                {
                    b.HasOne("Calculator.Models.WebContent", "WebContent")
                        .WithMany()
                        .HasForeignKey("WebContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebContent");
                });

            modelBuilder.Entity("Calculator.Models.WebFormVersion", b =>
                {
                    b.HasOne("Calculator.Models.WebForm", "WebForm")
                        .WithMany("FormVersions")
                        .HasForeignKey("WebFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WebForm");
                });

            modelBuilder.Entity("Calculator.Models.WebPage", b =>
                {
                    b.HasOne("Calculator.Models.Website", "Website")
                        .WithMany("WebPages")
                        .HasForeignKey("WebSiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Calculator.Models.Website", b =>
                {
                    b.HasOne("Calculator.Models.Business", "Business")
                        .WithMany("Websites")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Calculator.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId");

                    b.Navigation("Business");

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("Calculator.Models.WebsiteAlias", b =>
                {
                    b.HasOne("Calculator.Models.Website", "Website")
                        .WithMany("WebsiteAliases")
                        .HasForeignKey("WebsiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Calculator.Models.Business", b =>
                {
                    b.Navigation("Websites");
                });

            modelBuilder.Entity("Calculator.Models.Chat", b =>
                {
                    b.Navigation("ChatEntries");
                });

            modelBuilder.Entity("Calculator.Models.Individual", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("Calculator2Characters");

                    b.Navigation("ChatEntries");

                    b.Navigation("ChatIndividuals");

                    b.Navigation("Chats");

                    b.Navigation("IndividualsInBusinesses");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Calculator.Models.LookupCategory", b =>
                {
                    b.Navigation("LookupTypes");
                });

            modelBuilder.Entity("Calculator.Models.PageLoad", b =>
                {
                    b.Navigation("PageInteractions");
                });

            modelBuilder.Entity("Calculator.Models.WebContent", b =>
                {
                    b.Navigation("WebContentItems");
                });

            modelBuilder.Entity("Calculator.Models.WebForm", b =>
                {
                    b.Navigation("FormVersions");
                });

            modelBuilder.Entity("Calculator.Models.WebPage", b =>
                {
                    b.Navigation("WebContents");
                });

            modelBuilder.Entity("Calculator.Models.Website", b =>
                {
                    b.Navigation("WebPages");

                    b.Navigation("WebsiteAliases");
                });
#pragma warning restore 612, 618
        }
    }
}
